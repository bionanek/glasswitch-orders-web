{"version":3,"sources":["components/Customers/CustomersData.js","components/common/SimpleList/SimpleList.js","components/Customers/CustomersList.js","App.js","serviceWorker.js","index.js"],"names":["dummyCustomers","name","email","phone","vatNumber","delivery_street","delivery_city","delivery_country","delivery_postCode","billing_street","billing_city","billing_country","billing_postCode","updatedAt","createdAt","deletable","SimpleList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDeleteClick","el","index","console","log","elements","filter","element","key","setState","getListElementsHTML","editable","state","isListDeletable","isListEditable","_this2","map","react_default","a","createElement","className","title","toString","subTitle","index_es","icon","faEdit","onClick","deleteHandler","faTrashAlt","React","Component","CustomersList","customersListObjects","customer","common_SimpleList_SimpleList","App","components_Customers_CustomersList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9466bfc8.chunk.js","sourcesContent":["const dummyCustomers = [\n  {\n    name: \"Customer1\",\n    email: \"customer@customer.pl\",\n    phone: null,\n    vatNumber: \"PL123123123\",\n    delivery_street: \"Street 1\",\n    delivery_city: \"City\",\n    delivery_country: \"Country\",\n    delivery_postCode: null,\n    billing_street: \"Billing street 1\",\n    billing_city: \"Billing city\",\n    billing_country: \"Billing Country\",\n    billing_postCode: null,\n    updatedAt: \"2019-03-14T00:14:51.766Z\",\n    createdAt: \"2019-03-14T00:14:51.766Z\",\n    deletable: true\n  },\n  {\n    name: \"Customer2\",\n    email: \"customer@customer.pl\",\n    phone: null,\n    vatNumber: \"PL123123123\",\n    delivery_street: \"Street 1\",\n    delivery_city: \"City\",\n    delivery_country: \"Country\",\n    delivery_postCode: null,\n    billing_street: \"Billing street 1\",\n    billing_city: \"Billing city\",\n    billing_country: \"Billing Country\",\n    billing_postCode: null,\n    updatedAt: \"2019-03-14T00:14:51.766Z\",\n    createdAt: \"2019-03-14T00:14:51.766Z\",\n    deletable: true\n  },\n  {\n    name: \"Customer3\",\n    email: \"customer@customer.pl\",\n    phone: null,\n    vatNumber: \"PL123123123\",\n    delivery_street: \"Street 1\",\n    delivery_city: \"City\",\n    delivery_country: \"Country\",\n    delivery_postCode: null,\n    billing_street: \"Billing street 1\",\n    billing_city: \"Billing city\",\n    billing_country: \"Billing Country\",\n    billing_postCode: null,\n    updatedAt: \"2019-03-14T00:14:51.766Z\",\n    createdAt: \"2019-03-14T00:14:51.766Z\",\n    deletable: false\n  }\n];\n\nexport default dummyCustomers;\n","import React from \"react\";\nimport \"./SimpleList.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrashAlt, faEdit } from \"@fortawesome/free-solid-svg-icons\";\n\nclass SimpleList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.elements = this.getListElementsHTML(\n      this.props.elements,\n      this.props.deletable,\n      this.props.editable\n    );\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.setState({ elements: this.elements });\n  }\n\n  onDeleteClick = (el, index) => {\n    console.log(this.elements);\n    console.log(index);\n    this.elements = this.elements.filter(element => element.key != index);\n    this.setState({ elements: this.elements });\n  };\n\n  getListElementsHTML(elements, isListDeletable, isListEditable) {\n    return elements.map((el, index) => {\n      return (\n        <li key={index} className=\"list-element\">\n          <span className=\"title\">{el.title.toString()}</span>\n          <span className=\"sub-title\">{el.subTitle.toString()}</span>\n          <span className=\"buttons-wrapper\">\n            {isListEditable && (\n              <span className=\"edit-icon\">\n                <FontAwesomeIcon icon={faEdit} />\n              </span>\n            )}\n            {isListDeletable && el.deletable && (\n              <span\n                className=\"delete-icon\"\n                onClick={() => {\n                  if (el.deleteHandler) {\n                    el.deleteHandler(el, index);\n                  } else {\n                    this.onDeleteClick(el, index);\n                  }\n                }}\n              >\n                <FontAwesomeIcon icon={faTrashAlt} />\n              </span>\n            )}\n          </span>\n        </li>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"list-wrapper\">\n        <ul className=\"list\">{this.state.elements}</ul>\n      </div>\n    );\n  }\n}\n\nexport default SimpleList;\n","import React, { Component } from \"react\";\nimport \"./CustomersList.scss\";\nimport dummyCustomers from \"./CustomersData\";\nimport SimpleList from \"../common/SimpleList/SimpleList\";\nclass CustomersList extends Component {\n  customersListObjects = dummyCustomers.map((customer, index) => {\n    return {\n      title: customer.name,\n      subTitle: customer.email,\n      deletable: customer.deletable,\n      deleteHandler: null\n    };\n  });\n\n  render() {\n    return (\n      <div className=\"customers-list-wrapper\">\n        <div className=\"header\">\n          <h1>List Of Customers</h1>\n        </div>\n        <SimpleList\n          elements={this.customersListObjects}\n          deletable={true}\n          editable={false}\n        />\n      </div>\n    );\n  }\n}\n\nexport default CustomersList;\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport CustomersList from \"./components/Customers/CustomersList.js\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <CustomersList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}